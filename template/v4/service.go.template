package service

import (
	cDto "github.com/kingwel-xie/k2/common/dto"
	k2Error "github.com/kingwel-xie/k2/common/error"
	"github.com/kingwel-xie/k2/common/service"

	"{{.PackageName}}/models"
	"{{.PackageName}}/service/dto"
)

type {{.ClassName}} struct {
	service.Service
}

// GetPage 获取{{.ClassName}}列表
func (e *{{.ClassName}}) GetPage(c *dto.{{.ClassName}}GetPageReq, list *[]models.{{.ClassName}}, count *int64) error {
	var data models.{{.ClassName}}
	err := e.Orm.Model(&data).
		Scopes(
		    {{- if (.DataScope) }}
		    service.Permission(data.TableName(), e.Identity),
		    {{- end }}
			cDto.MakeCondition(c.GetNeedSearch()),
			cDto.Paginate(c.GetPageSize(), c.GetPageIndex()),
		).
		Find(list).Limit(-1).Offset(-1).
		Count(count).Error

	return err
}

// Get 获取{{.ClassName}}对象
func (e *{{.ClassName}}) Get(d *dto.{{.ClassName}}GetReq, model *models.{{.ClassName}}) error {
	err := e.Orm.
	    {{- if (.DataScope) }}
	    Scopes(
            service.Permission(model.TableName(), e.Identity),
        ).
        {{- end }}
        First(model, "{{.PkColumn}} = ?", d.GetId()).Error
	if err != nil {
		return k2Error.ErrCodeNotFound.Wrap(err)
	}
	return nil
}

// Insert 创建{{.ClassName}}对象
func (e *{{.ClassName}}) Insert(c *dto.{{.ClassName}}InsertReq) error {
    var err error
    {{- $AutoIncPk := false -}}
    {{- range .Columns -}}
    {{- if and .GoType .IsPk .AutoInc -}}{{- $AutoIncPk = true -}}{{- end -}}
    {{- end -}}
    {{- if not ($AutoIncPk) }}
	var list []models.{{.ClassName}}
	err = e.Orm.
		Find(&list, "{{.PkColumn}} = ?", c.GetId()).Error
	if err != nil {
		return k2Error.ErrDatabase.Wrap(err)
	}
	if len(list) > 0 {
		return k2Error.ErrCodeExisted
	}
	{{- end }}

    var data models.{{.ClassName}}
    c.Generate(&data)
    data.SetCreateBy(e.Identity.UserId)

	err = e.Orm.Create(&data).Error
	if err != nil {
	    return k2Error.ErrDatabase.Wrap(err)
	}
	c.{{.PkGoField}} = data.{{.PkGoField}}
	return nil
}

// Update 修改{{.ClassName}}对象
func (e *{{.ClassName}}) Update(c *dto.{{.ClassName}}UpdateReq) error {
    var data = models.{{.ClassName}}{}
    err := e.Orm.
	    {{- if (.DataScope) }}
	    Scopes(
            service.Permission(data.TableName(), e.Identity),
        ).
        {{- end }}
        First(&data, "{{.PkColumn}} = ?", c.GetId()).Error
    if err != nil {
    	return k2Error.ErrCodeNotFound.Wrap(err)
	}
    c.Generate(&data)
    data.SetUpdateBy(e.Identity.UserId)

    db := e.Orm.Save(&data)
	if db.Error != nil {
		return k2Error.ErrDatabase.Wrap(db.Error)
	}
	if db.RowsAffected == 0 {
		return k2Error.ErrPermissionDenied
	}
    return nil
}

// Remove 删除{{.ClassName}}
func (e *{{.ClassName}}) Remove(d *dto.{{.ClassName}}DeleteReq) error {
	var data models.{{.ClassName}}
	db := e.Orm.
	    {{- if (.DataScope) }}
	    Scopes(
            service.Permission(data.TableName(), e.Identity),
        ).
        {{- end }}
	    Delete(&data, "{{.PkColumn}} in ?", d.GetId())
	if db.Error != nil {
		return k2Error.ErrDatabase.Wrap(db.Error)
	}
	if db.RowsAffected == 0 {
		return k2Error.ErrPermissionDenied
	}
	return nil
}