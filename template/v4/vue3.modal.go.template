<template>
  <BasicModal
    v-bind="$attrs"
    @register="registerModal"
    :title="title"
    width="550px"
    @ok="handleSubmit"
  >
    <BasicForm @register="registerForm" />
  </BasicModal>
</template>
<script lang="ts" setup>
  import { ref, unref } from 'vue';
  import { BasicForm, useForm } from '/@/components/Form/index';
  import { formSchema } from './data';
  import { BasicModal, useModalInner } from '/@/components/Modal';
  import { useI18n } from '/@/hooks/web/useI18n';
  import {
    get{{.ClassName}}ByKey,
    add{{.ClassName}}Entry,
    update{{.ClassName}}Entry,
  } from '/@/api/{{.PackageName}}/{{.ModuleFrontName}}';

  const { t } = useI18n();
  const emit = defineEmits(['register', 'success']);

  const isUpdate = ref(true);
  const title = ref('');

  const [registerForm, { resetFields, setFieldsValue, validate, updateSchema }] = useForm({
    labelWidth: 90,
    baseColProps: { span: 24 },
    schemas: formSchema,
    showActionButtonGroup: false,
  });

  const [registerModal, { setModalProps, closeModal }] = useModalInner(async (data) => {
    await resetFields();
    setModalProps({ confirmLoading: false });
    isUpdate.value = !!data?.isUpdate;

    if (unref(isUpdate)) {
      data.record = await get{{.ClassName}}ByKey(data.record.{{.PkJsonField}});
      await setFieldsValue({
        ...data.record,
      });
      title.value = t('common.modalEditText') + data.record.{{.PkJsonField}};
    } else {
      title.value = t('common.modalAddText');
    }

    await updateSchema([
      {{- range .Columns -}}
      {{- if or (.NotOnUpdate) (.IsPk) }}
      {
        field: '{{.JsonField}}',
        dynamicDisabled: unref(isUpdate),
      },{{ end -}}
      {{- end }}
    ]);
  });

  async function handleSubmit() {
    try {
      const values = await validate();

      setModalProps({ confirmLoading: true });
      if (!unref(isUpdate)) {
        await add{{.ClassName}}Entry(values);
      } else {
        await update{{.ClassName}}Entry(values);
      }

      closeModal();
      emit('success');
    } finally {
      setModalProps({ confirmLoading: false });
    }
  }
</script>
